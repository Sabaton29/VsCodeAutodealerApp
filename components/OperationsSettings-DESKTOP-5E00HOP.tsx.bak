
import React, { useState } from 'react';
import type { OperationsSettings, ServiceCategory, InventoryCategory } from '../types';
import { Icon } from './Icon';
import CategoryForm from './CategoryForm';

interface OperationsSettingsProps {
    settings: OperationsSettings | null;
    onSaveServiceCategory: (category: ServiceCategory | Omit<ServiceCategory, 'id'>) => void;
    onDeleteServiceCategory: (categoryId: string) => void;
    onSaveInventoryCategory: (category: InventoryCategory | Omit<InventoryCategory, 'id'>) => void;
    onDeleteInventoryCategory: (categoryId: string) => void;
    onAddServiceCategory: () => void;
    onEditServiceCategory: (category: ServiceCategory) => void;
    onAddInventoryCategory: () => void;
    onEditInventoryCategory: (category: InventoryCategory) => void;
    onUpdateAllWorkOrderStages?: () => Promise<{ updated: number; skipped: number; errors: string[] }>;
    // Datos para diagn√≥stico
    workOrders?: any[];
    quotes?: any[];
}

const CatalogManager: React.FC<{
    title: string;
    items: { id: string; name: string }[] | undefined;
    onAdd: () => void;
    onEdit: (item: { id: string; name: string }) => void;
    onDelete: (itemId: string) => void;
}> = ({ title, items = [], onAdd, onEdit, onDelete }) => (
    <div className="bg-light dark:bg-dark-light rounded-xl shadow-md">
        <div className="p-4 flex justify-between items-center border-b border-gray-200 dark:border-gray-800">
            <h3 className="text-lg font-bold text-light-text dark:text-dark-text">{title}</h3>
            <button onClick={onAdd} className="flex items-center justify-center gap-2 px-3 py-1.5 text-xs font-semibold text-white bg-brand-red rounded-lg shadow-md hover:bg-red-700 transition-colors">
                <Icon name="plus" className="w-4 h-4" />
                A√±adir
            </button>
        </div>
        <ul className="divide-y divide-gray-200 dark:divide-gray-800">
            {items && items.length > 0 ? (
                items.map(item => (
                    <li key={item.id} className="px-6 py-3 flex items-center justify-between">
                        <span className="text-sm text-light-text dark:text-dark-text">{item.name}</span>
                        <div className="flex items-center gap-2">
                            <button onClick={() => onEdit(item)} className="p-2 text-gray-400 hover:text-brand-red transition-colors" title="Editar">
                                <Icon name="edit" className="w-4 h-4" />
                            </button>
                            <button onClick={() => onDelete(item.id)} className="p-2 text-gray-400 hover:text-red-500 transition-colors" title="Eliminar">
                                <Icon name="trash" className="w-4 h-4" />
                            </button>
                        </div>
                    </li>
                ))
            ) : (
                <li className="px-6 py-8 text-center text-gray-500 dark:text-gray-400">
                    No hay categor√≠as disponibles. Haz clic en "A√±adir" para crear la primera.
                </li>
            )}
        </ul>
    </div>
);

const OperationsSettings: React.FC<OperationsSettingsProps> = ({
    settings,
    onSaveServiceCategory,
    onDeleteServiceCategory,
    onSaveInventoryCategory,
    onDeleteInventoryCategory,
    onAddServiceCategory,
    onEditServiceCategory,
    onAddInventoryCategory,
    onEditInventoryCategory,
    onUpdateAllWorkOrderStages,
    workOrders = [],
    quotes = [],
}) => {
    const [showServiceForm, setShowServiceForm] = useState(false);
    const [showInventoryForm, setShowInventoryForm] = useState(false);
    const [editingServiceCategory, setEditingServiceCategory] = useState<ServiceCategory | null>(null);
    const [editingInventoryCategory, setEditingInventoryCategory] = useState<InventoryCategory | null>(null);
    const [isUpdatingStages, setIsUpdatingStages] = useState(false);

    const handleSaveServiceCategory = (category: ServiceCategory | Omit<ServiceCategory, 'id'>) => {
        onSaveServiceCategory(category);
        setShowServiceForm(false);
        setEditingServiceCategory(null);
    };

    const handleSaveInventoryCategory = (category: InventoryCategory | Omit<InventoryCategory, 'id'>) => {
        onSaveInventoryCategory(category);
        setShowInventoryForm(false);
        setEditingInventoryCategory(null);
    };

    const handleEditServiceCategory = (category: ServiceCategory) => {
        setEditingServiceCategory(category);
        setShowServiceForm(true);
    };

    const handleEditInventoryCategory = (category: InventoryCategory) => {
        setEditingInventoryCategory(category);
        setShowInventoryForm(true);
    };

    const handleAddServiceCategory = () => {
        setEditingServiceCategory(null);
        setShowServiceForm(true);
    };

    const handleAddInventoryCategory = () => {
        setEditingInventoryCategory(null);
        setShowInventoryForm(true);
    };

    const handleUpdateAllWorkOrderStages = async() => {
        if (!onUpdateAllWorkOrderStages) return;
        
        setIsUpdatingStages(true);
        try {
            const result = await onUpdateAllWorkOrderStages();
            console.warn(`Actualizaci√≥n completada:\n‚úÖ ${result.updated} √≥rdenes actualizadas\n‚è≠Ô∏è ${result.skipped} sin cambios\n‚ùå ${result.errors.length} errores`);
        } catch (error) {
            console.warn(`Error en la actualizaci√≥n: ${error}`);
        } finally {
            setIsUpdatingStages(false);
        }
    };

    const handleDiagnoseDataStructure = () => {
        console.debug('üîç === DIAGN√ìSTICO DE ESTRUCTURA DE DATOS ===');
        
        try {
            console.debug(`üìä Total √≥rdenes: ${workOrders.length}, Total cotizaciones: ${quotes.length}`);

            // Verificar √≥rdenes con cotizaciones vinculadas
            const ordersWithLinkedQuotes = workOrders.filter(wo => wo.linkedQuoteIds && wo.linkedQuoteIds.length > 0);
            console.debug(`üîó √ìrdenes con linkedQuoteIds: ${ordersWithLinkedQuotes.length}`);

            // Verificar cotizaciones con workOrderId
            const quotesWithWorkOrder = quotes.filter(q => q.workOrderId);
            console.debug(`üìã Cotizaciones con workOrderId: ${quotesWithWorkOrder.length}`);

            // Mostrar detalles de la orden 0041
            const order0041 = workOrders.find(wo => wo.id === '0041');
            if (order0041) {
                console.debug('üîç Orden 0041:', {
                    id: order0041.id,
                    stage: order0041.stage,
                    linkedQuoteIds: order0041.linkedQuoteIds,
                    serviceRequested: order0041.serviceRequested,
                });
            } else {
                console.debug('‚ùå Orden 0041 no encontrada');
            }

            // Mostrar cotizaciones que deber√≠an estar vinculadas a 0041
            const quotesFor0041 = quotes.filter(q => q.workOrderId === '0041');
            console.debug('üìã Cotizaciones para 0041:', quotesFor0041.map(q => ({
                id: q.id,
                workOrderId: q.workOrderId,
                status: q.status,
                total: q.total,
            })));

            // Mostrar todas las cotizaciones
            console.debug('üìã Todas las cotizaciones:', quotes.map(q => ({
                id: q.id,
                workOrderId: q.workOrderId,
                status: q.status,
                total: q.total,
            })));

            // Mostrar todas las √≥rdenes (solo las primeras 5 para no saturar)
            console.debug('üîç Primeras 5 √≥rdenes:', workOrders.slice(0, 5).map(wo => ({
                id: wo.id,
                stage: wo.stage,
                linkedQuoteIds: wo.linkedQuoteIds,
                serviceRequested: wo.serviceRequested,
            })));

            // Crear resumen para el alert
            const summary = `
DIAGN√ìSTICO COMPLETADO:

üìä Datos encontrados:
‚Ä¢ √ìrdenes: ${workOrders.length}
‚Ä¢ Cotizaciones: ${quotes.length}
‚Ä¢ √ìrdenes con v√≠nculos: ${ordersWithLinkedQuotes.length}
‚Ä¢ Cotizaciones con workOrderId: ${quotesWithWorkOrder.length}

üîç Orden 0041:
‚Ä¢ Encontrada: ${order0041 ? 'S√≠' : 'No'}
‚Ä¢ V√≠nculos: ${order0041?.linkedQuoteIds?.length || 0}
‚Ä¢ Cotizaciones vinculadas: ${quotesFor0041.length}

Revisa la consola (F12) para detalles completos.
            `;

            console.warn(summary);
        } catch (error) {
            console.error('‚ùå Error en diagn√≥stico:', error);
            console.warn(`Error en diagn√≥stico: ${error}. Abre la consola para m√°s detalles.`);
        }
    };

    return (
        <div className="space-y-6">
            <p className="text-sm text-gray-500 dark:text-gray-400">
                Personaliza los cat√°logos y flujos de trabajo del taller para adaptarlos a tus necesidades.
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <CatalogManager
                    title="Categor√≠as de Servicios"
                    items={settings?.serviceCategories || []}
                    onAdd={handleAddServiceCategory}
                    onEdit={handleEditServiceCategory}
                    onDelete={onDeleteServiceCategory}
                />
                <CatalogManager
                    title="Categor√≠as de Inventario"
                    items={settings?.inventoryCategories || []}
                    onAdd={handleAddInventoryCategory}
                    onEdit={handleEditInventoryCategory}
                    onDelete={onDeleteInventoryCategory}
                />
            </div>

            {/* Service Category Form */}
            <CategoryForm
                isOpen={showServiceForm}
                onClose={() => {
                    setShowServiceForm(false);
                    setEditingServiceCategory(null);
                }}
                onSave={handleSaveServiceCategory}
                category={editingServiceCategory}
                type="service"
            />

            {/* Inventory Category Form */}
            <CategoryForm
                isOpen={showInventoryForm}
                onClose={() => {
                    setShowInventoryForm(false);
                    setEditingInventoryCategory(null);
                }}
                onSave={handleSaveInventoryCategory}
                category={editingInventoryCategory}
                type="inventory"
            />

            {/* Admin Tools Section */}
            <div className="bg-light dark:bg-dark-light rounded-xl shadow-md border border-red-200 dark:border-red-800">
                <div className="p-4 border-b border-gray-200 dark:border-gray-800">
                    <h3 className="text-lg font-bold text-light-text dark:text-dark-text flex items-center gap-2">
                        <Icon name="tool" className="w-5 h-5 text-orange-500" />
                        Herramientas de Administraci√≥n
                    </h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                        Herramientas avanzadas para mantenimiento y correcci√≥n de datos del sistema.
                    </p>
                </div>
                <div className="p-4">
                    <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-4">
                        <div className="flex items-start gap-3">
                            <Icon name="warning" className="w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5 flex-shrink-0" />
                            <div>
                                <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">Actualizaci√≥n de Etapas de √ìrdenes de Trabajo</h4>
                                <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
                                    Esta herramienta corregir√° autom√°ticamente las etapas de todas las √≥rdenes de trabajo 
                                    seg√∫n la l√≥gica de negocio del sistema. Solo ejecuta esta funci√≥n si las etapas est√°n 
                                    desactualizadas.
                                </p>
                            </div>
                        </div>
                    </div>
                    
                    <div className="flex gap-3">
                        <button
                            onClick={handleUpdateAllWorkOrderStages}
                            disabled={isUpdatingStages || !onUpdateAllWorkOrderStages}
                            className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-orange-600 rounded-lg shadow-md hover:bg-orange-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                        >
                            {isUpdatingStages ? (
                                <>
                                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                    Actualizando...
                                </>
                            ) : (
                                <>
                                    <Icon name="refresh" className="w-4 h-4" />
                                    Actualizar Todas las Etapas
                                </>
                            )}
                        </button>
                        
                        <button
                            onClick={handleDiagnoseDataStructure}
                            className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 transition-colors"
                        >
                            <Icon name="search" className="w-4 h-4" />
                            Diagnosticar Estructura de Datos
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default OperationsSettings;
